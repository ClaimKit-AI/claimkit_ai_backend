const OpenAI = require('openai');
const config = require('../config/config');
const logger = require('../utils/logger');

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: config.ai.openai.apiKey
});

/**
 * Generate a medical travel report using OpenAI
 * @param {Object} patient - Patient data
 * @param {string} language - Target language
 * @returns {Object} Generated report
 */
const generateTravelReport = async (patient, language) => {
  try {
    // Build system prompt for medical travel report generation
    const systemPrompt = `You are a medical professional tasked with creating a medical travel report for a patient. 
Generate a comprehensive medical travel report with the following sections:
1. Patient Information (use the provided patient data)
2. Medical History (based on the patient's history)
3. Current Conditions
4. Medications
5. Allergies
6. Travel Recommendations (based on medical conditions)
7. Medical Clearance statement
8. Key phrases in ${language} that might be useful during travel

The report should be professional, accurate, and tailored to the patient's conditions.`;

    // Build user prompt with patient info
    const userPrompt = `Generate a medical travel report for:
Name: ${patient.name}
Age: ${patient.age}
Gender: ${patient.gender}
Medical History: ${patient.medicalHistory.join(', ')}

The report should include appropriate travel recommendations and important phrases translated to ${language}.`;

    // Call OpenAI API
    const response = await openai.chat.completions.create({
      model: config.ai.openai.model,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 1500
    });

    // Process the response and structure it for the frontend
    const content = response.choices[0].message.content;
    const reportData = processOpenAIResponse(content, patient, language);
    
    return reportData;
  } catch (error) {
    logger.error(`Error generating travel report with OpenAI: ${error.message}`);
    throw error;
  }
};

/**
 * Process an open-ended query about travel medicine using OpenAI
 * @param {string} query - User's query
 * @param {Object} patient - Patient data (optional)
 * @returns {string} AI response
 */
const processTravelQuery = async (query, patient = null) => {
  try {
    // Build context with patient info if available
    let patientContext = '';
    if (patient) {
      patientContext = `This question is regarding a patient:
Name: ${patient.name}
Age: ${patient.age}
Gender: ${patient.gender}
Medical History: ${patient.medicalHistory.join(', ')}`;
    }

    // Build system prompt
    const systemPrompt = `You are a medical professional specializing in travel medicine. 
Provide accurate, helpful information about medical concerns related to travel.
Keep responses professional, evidence-based, and appropriate for a healthcare setting.
If asked about medications, include appropriate disclaimers about consulting with a physician.`;

    // Call OpenAI API
    const response = await openai.chat.completions.create({
      model: config.ai.openai.model,
      messages: [
        { role: 'system', content: systemPrompt },
        ...(patientContext ? [{ role: 'user', content: patientContext }] : []),
        { role: 'user', content: query }
      ],
      temperature: 0.7,
      max_tokens: 1000
    });

    return response.choices[0].message.content;
  } catch (error) {
    logger.error(`Error processing travel query with OpenAI: ${error.message}`);
    throw error;
  }
};

/**
 * Process the raw OpenAI response into a structured report
 * @param {string} content - Raw response from OpenAI
 * @param {Object} patient - Patient data
 * @param {string} language - Target language
 * @returns {Object} Structured report
 */
function processOpenAIResponse(content, patient, language) {
  // Default structure
  const report = {
    patientInfo: {
      name: patient.name,
      age: patient.age,
      gender: patient.gender
    },
    medicalHistory: patient.medicalHistory || [],
    currentConditions: [],
    medications: [],
    allergies: [],
    travelRecommendations: [],
    medicalClearance: '',
    languageTranslation: {},
    disclaimer: 'This report was generated by AI and should be reviewed by a healthcare professional. The information provided is not a substitute for professional medical advice.'
  };

  try {
    // Very simple parser - in production would use a more robust approach
    const sections = content.split(/\n\s*#+\s*/);
    
    sections.forEach(section => {
      const lines = section.split('\n');
      const heading = lines[0].trim().toLowerCase();
      const content = lines.slice(1).join('\n').trim();
      
      if (heading.includes('current condition') || heading.includes('active condition')) {
        report.currentConditions = extractListItems(content);
      } else if (heading.includes('medication')) {
        report.medications = extractListItems(content);
      } else if (heading.includes('allerg')) {
        report.allergies = extractListItems(content);
      } else if (heading.includes('recommendation') || heading.includes('travel advice')) {
        report.travelRecommendations = extractListItems(content);
      } else if (heading.includes('clearance') || heading.includes('approval')) {
        report.medicalClearance = content;
      } else if (heading.includes('phrase') || heading.includes('translation') || heading.includes('language')) {
        // Process translations
        const phrases = extractListItems(content);
        phrases.forEach(phrase => {
          const parts = phrase.split(':');
          if (parts.length === 2) {
            report.languageTranslation[parts[0].trim()] = parts[1].trim();
          }
        });
      }
    });
    
    return report;
  } catch (error) {
    logger.error(`Error processing OpenAI response: ${error.message}`);
    // Return the default report if parsing fails
    return report;
  }
}

/**
 * Extract list items from a text block
 * @param {string} text - Text containing list items
 * @returns {Array} Array of list items
 */
function extractListItems(text) {
  const lines = text.split('\n');
  return lines
    .map(line => line.replace(/^[-*â€¢]\s*/, '').trim())
    .filter(line => line.length > 0);
}

module.exports = {
  generateTravelReport,
  processTravelQuery
}; 